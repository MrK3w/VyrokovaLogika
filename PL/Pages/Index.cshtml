@page
@model IndexModel
@{
    ViewData["Title"] = "PL";
}

<!DOCTYPE html>
<html>
<head>
    <title>My Page</title>
    <link rel="stylesheet" href="https://unpkg.com/treeflex/dist/css/treeflex.css">
    <script src="~/js/vivagraph.js"></script>
    <script src="~/js/DAG.js"></script>
    <script src="~/js/jquery-1.10.2.min.js"></script>
    <script src="~/js/Exercise.js"></script>
    <script src="~/js/ExerciseDAG.js"></script>
    <script src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
    <link rel="stylesheet" href="~/css/styles.css" />
</head>

<body>

    <div class="container mx-auto">
        <div class="row">
            <div class="col-md-2">
                <div class="square-div">
                    <p>
                        For writing logical operators you can use this signs <br />
                        <ul>
                            <li>Conjunction: (&amp;, &and;)</li>
                            <li>Disjunction: (|, &or;)</li>
                            <li>Negation: (-, &not;)</li>
                            <li>Implication: (&gt;, &rarr;)</li>
                            <li>Equation: (= , &equiv;)</li>
                    </p>
                </div>
                 <div class="square-div">
                    <p>
                        Please use brackets between two logical operators! For example x ∨ y ∧ z is not valid. Use x ∨ (y ∧ z) or (x∧y) ∨ z 
                    </p>
                </div>
                <div class="square-div">
                    <p>
                        Please use one letter literal. For example abc is not valid literal!
                    </p>
                </div>
                <div class="square-div">
                    <p>
                        When checking for tautology or contradiction, we search for formulas without logical contradictions. 
                        They should have consistent evaluations for all elemental logical propositions. We can then show counterarguments. 
                        For logical trees, we indicate the operators used for separation and truth value searched for in evaluations.
                    </p>
                </div>
            </div>
            <div class="col-md-10">
                <div class="text-center">
                    <h1 class="display-4">Vyrokova logika</h1>
                    <style>
                        .btn-group > input {
                            margin-right: 10px; /* Adjust this value to control the spacing between buttons */
                            margin-left: 10px; /* Adjust this value to control the spacing between buttons */
                            width: 175px; /* Set the width of the buttons */
                            height: 40px; /* Set the height of the buttons */
                        }
                    </style>
                    <form method="post" asp-action="Index" asp-controller="Home" id="TheForm" class="d-flex flex-column">
                        <div class="d-flex">
                            @Html.DropDownList("formula", Model.listItems, new { @class = "form-control custom-font", @style = "height: 66.67%;" })
                            @Html.TextBox("UserInput", "", new { @maxlength = "64", @class = "form-control ml-2 custom-font", @style = "height: 66.67%;" })


                            <div class="btn-toolbar ml-2 flex-fill" role="toolbar" aria-label="Toolbar with button groups">
                                <div class="btn-group flex-fill" role="group" aria-label="First group">
                                    <input type='submit' class="btn btn-primary flex-fill mb-2 mr-1" value='Create tree' name='submit' asp-page-handler="CreateTree" />
                                    <input type='submit' class="btn btn-primary flex-fill mb-2 " value='Create DAG' name='submit' asp-page-handler="CreateDAG" />
                                </div>
                                <div class="btn-group flex-fill" role="group" aria-label="Second group">
                                    <input type='submit' class="btn btn-primary flex-fill mb-2 mr-1" value='Check Tautology' name='submit' asp-page-handler="CheckTautology" />
                                    <input type='submit' class="btn btn-primary flex-fill mb-2 " value='Check Contradiction' name='submit' asp-page-handler="CheckContradiction" />
                                </div>
                                <div class="btn-group flex-fill" role="group" aria-label="Third group">
                                    <input type='submit' class="btn btn-primary flex-fill mb-2 mr-1" value='Draw tree' name='submit' asp-page-handler="DrawTree" />
                                    <input type='submit' class="btn btn-primary flex-fill mb-2 " value='Exercise' name='submit' asp-page-handler="Exercise"/>
                                </div>
                                <div class="btn-group flex-fill" role="group" aria-label="Third group">
                                    <input type='submit' class="btn btn-primary flex-fill mb-2 mr-1" value='Draw DAG Tautology' name='submit' asp-page-handler="CheckTautologyDAG" />
                                <input type='submit' class="btn btn-primary flex-fill mb-2 " value='Draw DAG Contradiction' name='submit' asp-page-handler="CheckContradictionDAG" />
                            </div>
                                <div class="btn-group flex-fill" role="group" aria-label="Fifth group">
                                <input type='submit' class="btn btn-primary flex-fill mb-2 mr-1" value='Exercise on DAG' name='submit' asp-page-handler="ExerciseDAG" />
                            </div>
                            </div>
                        </div>
                    </form>
                    @if (Model.Valid)
                    {
                        @if (Model.button == IndexModel.ButtonType.DAG)
                        {
                            <div id="mynetwork">
                            </div>
                            <script>
                                var myList = @Html.Raw(Json.Serialize(Model.DAGNodes));
                                var treeConnections = @Html.Raw(Json.Serialize(Model.TreeConnections));
                                makeDAG(myList, treeConnections);

                            </script>
                        }
                        @if (Model.button == IndexModel.ButtonType.SyntaxTree)
                        {


                            @if (Model.ConvertedTree != null)
                            {

                                <p>@Html.Raw(Model.ConvertedTree)</p>
                            }


                        }
                        @if (Model.button == IndexModel.ButtonType.CheckTautology)
                        {
                            @if (!Model.IsTautologyOrContradiction)
                            {
                                <p> This is not tautology!</p>
                                <p>Counterarguments</p>
                                
                            }
                            else
                            {
                                <p> This is tautology!</p>
                                <p> Example of semantic contradiction</p>
                            }
                            <div class="table-container">

                                <table>
                                    <tr>
                                        <th>Item</th>
                                        <th>Literal</th>
                                    </tr>
                                    @foreach (var node in Model.distinctNodes)
                                    {
                                        <tr>
                                            <td>@node.Item1</td>
                                            <td>@node.Item2</td>
                                        </tr>
                                    }
                                </table>
                            </div>
                            <p>@Html.Raw(Model.ConvertedTreeTruth)</p>
                        }

                        @if(Model.button == IndexModel.ButtonType.CheckTautologyDAG)
                            {
                            @if (!Model.IsTautologyOrContradiction)
                            {
                                <p> This is not tautology!</p>
                                <p>Counterarguments</p>
                            }
                            else
                            {
                                <p> This is tautology!</p>
                                <p> Example of semantic contradiction</p>
                            }
                            <div class="table-container">

                                <table>
                                    <tr>
                                        <th>Item</th>
                                        <th>Literal</th>
                                    </tr>
                                    @foreach (var node in Model.distinctNodes)
                                    {
                                        <tr>
                                            <td>@node.Item1</td>
                                            <td>@node.Item2</td>
                                        </tr>
                                    }
                                </table>
                            </div>

                            <div id="mynetwork">
                            </div>
                            <script>
                                var myList = @Html.Raw(Json.Serialize(Model.DAGNodes));
                                var treeConnections = @Html.Raw(Json.Serialize(Model.TreeConnections));
                                makeDAG(myList, treeConnections);

                            </script>
                        }

                        @if (Model.button == IndexModel.ButtonType.CheckContradictionDAG)
                        {
                            @if (!Model.IsTautologyOrContradiction)
                            {
                                <p> This is not contradiction!</p>
                                <p>Counterarguments</p>
                            }
                            else
                            {
                                <p> This is contradiction!</p>
                                <p> Example of semantic contradiction</p>
                            }
                            <div class="table-container">

                                <table>
                                    <tr>
                                        <th>Item</th>
                                        <th>Literal</th>
                                    </tr>
                                    @foreach (var node in Model.distinctNodes)
                                    {
                                        <tr>
                                            <td>@node.Item1</td>
                                            <td>@node.Item2</td>
                                        </tr>
                                    }
                                </table>
                            </div>

                            <div id="mynetwork">
                            </div>
                            <script>
                                var myList = @Html.Raw(Json.Serialize(Model.DAGNodes));
                                var treeConnections = @Html.Raw(Json.Serialize(Model.TreeConnections));
                                makeDAG(myList, treeConnections);

                            </script>
                        }

                        @if (Model.button == IndexModel.ButtonType.CheckContradiction)
                        {
                            @if (!Model.IsTautologyOrContradiction)
                            {
                                <p> This is not contradiction!</p>
                                <p>Counterarguments</p>
                            }
                            else
                            {
                                <p> This is Contaradicton!</p>
                                <p> Example of semantic contradiction</p>
                            }
                            <div class="table-container">

                                <table>
                                    <tr>
                                        <th>Item</th>
                                        <th>Literal</th>
                                    </tr>
                                    @foreach (var node in Model.distinctNodes)
                                    {
                                        <tr>
                                            <td>@node.Item1</td>
                                            <td>@node.Item2</td>
                                        </tr>
                                    }
                                </table>
                            </div>
                            <p>@Html.Raw(Model.ConvertedTreeTruth)</p>


                           
                        }

                        @if (Model.button == IndexModel.ButtonType.Exercise)
                        {
                           
                            <p>Formula is @Model.ExerciseFormula. Show that this is @Model.ExerciseType</p>
                            <p> To show that formula is Tautology you must find solution which equation is 0 and you find semantic contradiction. Otherwise find solution with
                                no contradiction. In case of Contradiction you must find solution which equation is 1 and you must find semantic contradiction. 
                                If it is not contradiction please find solution without semantic contradiction where equation is 1.
                            </p>
                            <p>@Html.Raw(Model.ConvertedTreeTruth)</p>
                            <p>@Model.ExerciseQuote</p>
                            <form method="post" asp-action="Index" asp-controller="Home" id="TheForm2">
                                <input type='submit' class="btn btn-primary" value='Check formula' id="myButton" name='submit2' asp-page-handler="ExerciseProcess" />
                                <input type="hidden" id="hiddenNumber" name="tree" value="" />
                            </form>
                        }
                        @if (Model.button == IndexModel.ButtonType.Draw)
                        {
                            @if (Model.ConvertedTree != null)
                            {
                                <p>@Html.Raw(Model.ConvertedTree)</p>
                                @Html.Raw(@Model.Arguments)
                            }
                        }
                        @if (Model.button == IndexModel.ButtonType.ExerciseDAG)
                        {
                            <p>Formula is @Model.ExerciseFormula. Show that this is @Model.ExerciseType</p>
                            <p>
                                To show that formula is Tautology you must find solution which equation is 0 and you find semantic contradiction. Otherwise find solution with
                                no contradiction. In case of Contradiction you must find solution which equation is 1 and you must find semantic contradiction.
                                If it is not contradiction please find solution without semantic contradiction where equation is 1.
                            </p>
                           
                            <div id="mynetwork">
                            </div>
                            <script>
                                var myList = @Html.Raw(Json.Serialize(Model.DAGNodes));
                                var treeConnections = @Html.Raw(Json.Serialize(Model.TreeConnections));
                                makeDAG(myList, treeConnections, true, @Model.mIssueIndex);
                            </script>
                          
                            <form method="post" asp-action="Index" asp-controller="Home" id="TheForm3">
                                <input type='submit' class="btn btn-primary" value='Check formula' id="myButton2" name='submit3' asp-page-handler="ExerciseProcessDAG" />
                                <input type="hidden" id="hiddenNumber2" name="pDAGNodes" value="" />
                                <input type="hidden" id="hiddenNumber3" name="DAGPath" value="" />
                            </form>
                            <div id="exercise-quote">
                                <p>@Model.ExerciseQuote</p>
                            </div>
                        }
                    }

                    @if (!Model.Valid)
                    {
                        <div class="alert alert-danger" role="alert" id="errorAlert">
                            Formula is invalid or not selected
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</body>
</html>
