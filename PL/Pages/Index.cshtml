@page
@using Microsoft.JSInterop;
@model IndexModel
@{
    ViewData["Title"] = "PL";
}

<!DOCTYPE html>
<html>
<head>
    <title>My Page</title>
    <link rel="stylesheet" href="https://unpkg.com/treeflex/dist/css/treeflex.css">
    <script src="~/js/vivagraph.js"></script>
    <script src="~/js/DAG.js"></script>
    <script src="~/js/jquery-1.10.2.min.js"></script>
    <link rel="stylesheet" href="~/css/styles.css" />
</head>

<body>
   
    <div class="container mx-auto">
        <div class="row">
            <div class="col-md-2">
                <div class="square-div">
                    <p>
                        For writing logical operators you can use this signs <br />
                        <ul>
                            <li>Conjunction: (&amp;, &and;)</li>
                            <li>Disjunction: (|, &or;)</li>
                            <li>Negation: (-, &not;)</li>
                            <li>Implication: (&gt;, &rarr;)</li>
                            <li>Equation: (= , &equiv;)</li>
                    </p>
                </div>
                <div class="square-div">
                    <p>
                        When checking for tautology or contradiction, we search for formulas without logical contradictions. They should have consistent evaluations for all elemental logical propositions. We can then show counterarguments. For logical trees, we indicate the operators used for separation and truth value searched for in evaluations.
                    </p>
                </div>
            </div>
            <div class="col-md-10">
    <div class="text-center">
        <h1 class="display-4">Vyrokova logika</h1>

                    <form method="post" asp-action="Index" asp-controller="Home" id="TheForm" class="d-flex flex-column">
                        <div class="d-flex">
                            @Html.DropDownList("formula", Model.listItems, "select formula", new { @class = "form-control custom-font" })
                            @Html.TextBox("UserInput", "", new { @maxlength = "64", @class = "form-control ml-2 custom-font", @style = "font-size: 16px;" })

                            <div class="btn-toolbar ml-2" role="toolbar" aria-label="Toolbar with button groups">
                                <div class="btn-group flex-fill" role="group" aria-label="First group">
                                    <input type='submit' class="btn btn-primary" value='Create tree' name='submit' />
                                    <input type='submit' class="btn btn-primary" value='Create DAG' name='submit' />
                                    <input type="hidden" id="hiddenNumber" name="hiddenNumber" value="" />
                                </div>
                                <div class="btn-group flex-fill" role="group" aria-label="Second group">
                                    <input type='submit' class="btn btn-primary" value='Check Tautology' name='submit' />
                                    <input type='submit' class="btn btn-primary" value='Check Contradiction' name='submit' />
                                </div>
                            </div>
                        </div>
                    </form>
       
            @if (Model.button == IndexModel.ButtonType.DAG)
            {

                <script>
                    var myList = @Html.Raw(Json.Serialize(Model.DAGNodes))
                    var treeConnections = @Html.Raw(Json.Serialize(Model.TreeConnections))
                    makeDAG(myList, treeConnections);
                </script>
            }
            @if (Model.button == IndexModel.ButtonType.SyntaxTree)
            {
                        

                @if (Model.ConvertedTree != null)
                {

                    <p>@Html.Raw(Model.ConvertedTree)</p>
                }
                        

            }
            @if (Model.button == IndexModel.ButtonType.CheckTautology)
            {
                @if (!Model.IsTautologyOrContradiction)
                {
                    <p> This is not tautology!</p>
                    <p>Counterarguments</p>
                    <!-- Define the table structure -->
                    <div class="table-container">

                        <table>
                            <tr>
                                <th>Item</th>
                                <th>Literal</th>
                            </tr>
                            @foreach (var node in Model.distinctNodes)
                            {
                                <tr>
                                    <td>@node.Item1</td>
                                    <td>@node.Item2</td>
                                </tr>
                            }
                        </table>
                    </div>
                <p>@Html.Raw(Model.ConvertedTreeTruth)</p>
                            <button id="myButton">Click me!</button>
                            <script>
                                $(document).ready(function () {
                                    // Attach a click event handler to the .tf-nc span element
                                    $(".tf-nc").on("click", function () {
                                        // Get the current span element
                                        var spanElement = $(this);

                                        // Get the current content of the span element
                                        var currentContent = spanElement.text();
                                        var newContent = currentContent.replace("0", "#").replace("1", "0").replace("#", "1");

                                        // Modify the content of the span element
                                        spanElement.text(newContent);
                                    });
                                });
                            </script>
                            <!-- Place your JavaScript code here -->
                            <script>
                                $(document).ready(function () {
                                    // Attach a click event handler to the #myButton element
                                    $("#myButton").on("click", function () {
                                        // Call your custom JavaScript function here
                                        myFunction();
                                    });
                                });

                                // Define your custom JavaScript function
                                function myFunction() {
                                    // Put your code here that you want to execute after clicking the button
                                    console.log("Button clicked!");

                                    // Get the element with class .tf-tree.tf-gap-sm
                                    var elements = document.querySelectorAll(".tf-tree.tf-gap-sm");
                                    console.log(elements[0]);
                                    var number = elements[0].innerHTML;

                                    // Set the hidden input value to the extracted number
                                    document.getElementById('hiddenNumber').value = number;
                                }
                            </script>
                }
                else
                {
                    <p> This is tautology!</p>
                }
            }
        @if (Model.button == IndexModel.ButtonType.CheckContradiction)
        {
            @if (!Model.IsTautologyOrContradiction)
            {
                <p> This is not contradiction!</p>
                <p>Counterarguments</p>
                <!-- Define the table structure -->
                <div class="table-container">

                    <table>
                        <tr>
                            <th>Item</th>
                            <th>Literal</th>
                        </tr>
                        @foreach (var node in Model.distinctNodes)
                        {
                            <tr>
                                <td>@node.Item1</td>
                                <td>@node.Item2</td>
                            </tr>
                        }
                    </table>
                </div>
                <p>@Html.Raw(Model.ConvertedTreeTruth)</p>
            }
            else
            {
                <p> This is contradiction!</p>
            }
        }

        

        @if(!Model.Valid)
        {
            <div class="alert alert-danger" role="alert" id="errorAlert">
                Formula is invalid or not selected
            </div>
        }
        </div>
            </div>
        </div>
    </div>
</body>
</html>