@page
@using Microsoft.JSInterop;
@model IndexModel
@{
    ViewData["Title"] = "PL";
}

<!DOCTYPE html>
<html>
<head>
    <title>My Page</title>
    <link rel="stylesheet" href="https://unpkg.com/treeflex/dist/css/treeflex.css">
    <script src="~/js/vivagraph.js"></script>
    <script src="~/js/DAG.js"></script>
    <script src="~/js/jquery-1.10.2.min.js"></script>
    <link rel="stylesheet" href="~/css/styles.css" />
</head>

<body>
    <div class="container mx-auto">
        <div class="row">
            <div class="col-md-2">
                <div class="square-div">
                    <p>
                        For writing logical operators you can use this signs <br />
                        <ul>
                            <li>Conjunction: (&amp;, &and;)</li>
                            <li>Disjunction: (|, &or;)</li>
                            <li>Negation: (-, &not;)</li>
                            <li>Implication: (&gt;, &rarr;)</li>
                            <li>Equation: (= , &equiv;)</li>
                    </p>
                </div>
                <div class="square-div">
                    <p>
                        When checking for tautology or contradiction, we search for formulas without logical contradictions. They should have consistent evaluations for all elemental logical propositions. We can then show counterarguments. For logical trees, we indicate the operators used for separation and truth value searched for in evaluations.
                    </p>
                </div>
            </div>
            <div class="col-md-10">
    <div class="text-center">
        <h1 class="display-4">Vyrokova logika</h1>

                    <form method="post" asp-action="Index" asp-controller="Home" id="TheForm" class="d-flex flex-column">
                        <div class="d-flex">
                            @Html.DropDownList("formula", Model.listItems, "select formula")
                            @Html.TextBox("UserInput", "", new { @maxlength = "64", @class = "form-control" })

                            <div class="btn-group ml-2">
                                <input type='submit' class="btn btn-primary" value='Create tree' name='submit' />
                                <input type='submit' class="btn btn-primary" value='Create DAG' name='submit' />
                                <input type="hidden" id="hiddenNumber" name="hiddenNumber" value="" />
                            </div>
                        </div>
                        <div class="d-flex mt-2">
                            <div class="btn-group">
                                <input type='submit' class="btn btn-primary" value='Check Tautology' name='submit' />
                                <input type='submit' class="btn btn-primary" value='Check Contradiction' name='submit' />
                            </div>
                        </div>
                    </form>
       
            @if (Model.button == IndexModel.ButtonType.DAG)
            {

                <script>
                    var myList = @Html.Raw(Json.Serialize(Model.DAGNodes))
                    var treeConnections = @Html.Raw(Json.Serialize(Model.TreeConnections))
                    makeDAG(myList, treeConnections);
                </script>
            }
            @if (Model.button == IndexModel.ButtonType.SyntaxTree)
            {
                        

                @if (Model.ConvertedTree != null)
                {

                    <p>@Html.Raw(Model.ConvertedTree)</p>
                }
                <script>
                            var elements = document.querySelectorAll(".tf-tree.tf-gap-sm");
                            console.log(elements[0]);
                            var number = elements[0].innerHTML;
                            document.getElementById('hiddenNumber').value = number;

                            
                </script>

            }
            @if (Model.button == IndexModel.ButtonType.CheckTautology)
            {
                @if (!Model.IsTautologyOrContradiction)
                {
                    <p> This is not tautology!</p>
                    <p>Counterarguments</p>
                    <!-- Define the table structure -->
                    <div class="table-container">

                        <table>
                            <tr>
                                <th>Item</th>
                                <th>Literal</th>
                            </tr>
                            @foreach (var node in Model.distinctNodes)
                            {
                                <tr>
                                    <td>@node.Item1</td>
                                    <td>@node.Item2</td>
                                </tr>
                            }
                        </table>
                    </div>
                <p>@Html.Raw(Model.ConvertedTreeTruth)</p>
                }
                else
                {
                    <p> This is tautology!</p>
                }
            }
        @if (Model.button == IndexModel.ButtonType.CheckContradiction)
        {
            @if (!Model.IsTautologyOrContradiction)
            {
                <p> This is not contradiction!</p>
                <p>Counterarguments</p>
                <!-- Define the table structure -->
                <div class="table-container">

                    <table>
                        <tr>
                            <th>Item</th>
                            <th>Literal</th>
                        </tr>
                        @foreach (var node in Model.distinctNodes)
                        {
                            <tr>
                                <td>@node.Item1</td>
                                <td>@node.Item2</td>
                            </tr>
                        }
                    </table>
                </div>
                <p>@Html.Raw(Model.ConvertedTreeTruth)</p>
            }
            else
            {
                <p> This is contradiction!</p>
            }
        }

        

        @if(!Model.Valid)
        {
            <div class="alert alert-danger" role="alert" id="errorAlert">
                Formula is invalid or not selected
            </div>
        }
        </div>
            </div>
        </div>
    </div>
</body>
</html>